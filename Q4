#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *prev;
    struct node *next;
};
struct node *head = NULL;

struct node *insert_at_begin(int data)
{
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;

    if (head == NULL)
    {
        head = newNode;
        return head;
    }
    else
    {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
    return head;
}

struct node *insert_at_end(int data)
{
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;

    if (head == NULL)
    {
        head = newNode;
        return head;
    }
    else
    {
        struct node *temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        newNode->prev = temp;
        temp->next = newNode;
    }
    return head;
}

struct node *delete_at_end()
{
    if (head == NULL)
        return NULL;
    struct node *temp = head;
    while (temp->next->next != NULL)
    {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;

    return head;
}

struct node *delete_at_begin()
{
    if (head == NULL)
        return head;

    struct node *temp = head;
    head->next->prev = NULL;
    head = head->next;

    free(temp);
}

struct node *display()
{
    struct node *temporary = head;
    while (temporary != NULL)
    {
        printf("%d\t", temporary->data);
        temporary = temporary->next;
    }
    return head;
}

struct node *insert_at_any(int data, int pos)
{
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    if (pos == 0)
    {
        newNode->next = head;
        if (head != NULL)
        {
            head->prev = newNode;
        }
        head = newNode;
        return head;
    }
    struct node *curr = head;
    for (int i = 1; i < pos && curr != NULL; i++)
    {
        curr = curr->next;
    }

    if (curr == NULL)
    {
        printf("Invalid position!\n");
        free(newNode);
        return head;
    }

    newNode->next = curr->next;
    if (curr->next != NULL)
    {
        curr->next->prev = newNode;
    }
    curr->next = newNode;
    newNode->prev = curr;

    return head;
}

struct node *delete_at_any(int pos)
{
    if (pos == 1)
    {
        delete_at_begin();
    }
    else
    {
        struct node *temp = head;
        for (int i = 1; i <= pos && temp != NULL; i++)
        {
            temp = temp->next;
        }

        if (temp == NULL)
        {
            printf("Invalid position\n");
        }
        else if (temp->next == NULL)
        {
            temp->prev->next = NULL;
            free(temp);
        }
        else
        {
            temp->prev->next = temp->next;
            temp->next->prev = temp->prev;
            free(temp);
        }
    }

    return head;
}

void delete_entire_LL()
{
    free(head);
}

void reverse_DLL()
{
    struct node *curr = head;
    struct node *temp = NULL;

    if (head == NULL)
    {
        printf("List has been deleted\n");
        return;
    }
    else
    {
        while (curr != NULL)
        {
            temp = curr->prev;
            curr->prev = curr->next;
            curr->next = temp;
            curr = curr->prev;
        }

        if (temp != NULL)
        {
            head = temp->prev;
        }
    }
}

int main()
{
    int choice, data, pos;

    while (1)
    {
        printf("\n--- Doubly Linked List Operations ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Insert at Any Position\n");
        printf("4. Delete at Beginning\n");
        printf("5. Delete at End\n");
        printf("6. Delete at Any Position\n");
        printf("7. Display List\n");
        printf("8. Reverse List\n");
        printf("9. Delete Entire List\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("Enter data to insert at beginning: ");
            scanf("%d", &data);
            head = insert_at_begin(data);
            break;

        case 2:
            printf("Enter data to insert at end: ");
            scanf("%d", &data);
            head = insert_at_end(data);
            break;

        case 3:
            printf("Enter data to insert: ");
            scanf("%d", &data);
            printf("Enter position (0-based index): ");
            scanf("%d", &pos);
            head = insert_at_any(data, pos);
            break;

        case 4:
            head = delete_at_begin();
            break;

        case 5:
            head = delete_at_end();
            break;

        case 6:
            printf("Enter position to delete (1-based index): ");
            scanf("%d", &pos);
            head = delete_at_any(pos);
            break;

        case 7:
            printf("Doubly Linked List: ");
            display();
            break;

        case 8:
            reverse_DLL();
            printf("List reversed!\n");
            break;

        case 9:
            delete_entire_LL();
            printf("Entire list deleted!\n");
            head = NULL;
            break;

        case 10:
            printf("Exiting...\n");
            exit(0);

        default:
            printf("Invalid choice! Please enter a number between 1-10.\n");
        }
    }

    return 0;
}
